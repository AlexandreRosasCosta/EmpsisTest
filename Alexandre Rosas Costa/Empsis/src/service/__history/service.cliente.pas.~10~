unit service.cliente;

interface

uses
  SysUtils, RegularExpressions;
type
  TCliente = class
  private
    FNome: string;
    FCpf: string;
    FTelefone: string;
    FEmail: string;
    FDataNascimento: TDate;
    function ValidarCpf(cpf: string): string;
  public
    constructor Create(const Nome, Cpf, Telefone, Email: string; DataNascimento: TDate);
    property Nome: string read FNome write FNome;
    property Cpf: string read FCpf write FCpf;
    property Telefone: string read FTelefone write FTelefone;
    property Email: string read FEmail write FEmail;
    property DataNascimento: TDate read FDataNascimento write FDataNascimento;
    procedure cadastrarCliente;
    procedure deletarCliente;
  end;
implementation

uses service.connection;

constructor TCliente.Create(const nome, cpf, telefone, email: string; dataNascimento: TDate);
begin
  inherited Create;
  FNome := nome;
  FCpf := ValidarCpf(cpf);
  FTelefone := telefone;
  FEmail := email;
  FDataNascimento := dataNascimento;
end;

procedure TCliente.deletarCliente;
begin
  try
    with DataModuleConnection.SQL_Query do
    begin
      Close;
      SQL.Text := 'UPDATE cliente SET cliente.status = 0 WHERE cliente.cpf = :cpf';
      Params.ParamByName('cpf').AsString
      Open;
    end;
  except

  end;
end;

procedure TCliente.cadastrarCliente;
begin
  try
    with DataModuleConnection.SQL_Query do
    begin
      SQL.Text := 'INSERT INTO cliente (nome, cpf, telefone, email, data_nascimento) ' +
                  'VALUES (:nome, :cpf, :telefone, :email, :data_nascimento)';
      ParamByName('nome').AsString := self.Nome;
      ParamByName('cpf').AsString := self.Cpf;
      ParamByName('telefone').AsString := self.Telefone;
      ParamByName('email').AsString := self.Email;
      ParamByName('data_nascimento').AsDate := self.DataNascimento;
      ExecSQL;
    end;
  except on E:Exception do
  begin
    DataModuleConnection.Connection.Rollback;
    raise Exception.Create('Não foi possível cadastrar o cliente');
  end;
  end;
end;

function TCliente.ValidarCpf(cpf: string): string;
begin
  Result := cpf;
end;

end.
